AWSTemplateFormatVersion: "2010-09-09"
Description: Lotteries Platform Service Elastic Stack ENI creation template
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: AWS Parameters
        Parameters:
          - VpcId
          - VpcSubnets
          - KeyName
      - Label:
          default: Chef automation parameters
        Parameters:
          - ChefEnvironment
      - Label:
          default: Elastic Stack parameters
        Parameters:
          - ElasticVersion
          - ElasticsearchInstanceType
          - KibanaVersion
          - KibanaInstanceType
          - LogstashVersion
          - LogstashInstanceType
      - Label:
          default: Elastic Stack internal users initial passwords
        Parameters:
          - ElasticPassword
          - KibanaPassword
          - LogstashPassword
      - Label:
          default: SSL pfx file packagesweb url location
        Parameters:
          - SslPfxLink
          - SslPfxPw
Parameters:
  VpcId:
    Description: ID of the VPC onto which to launch the application
    Type: AWS::EC2::VPC::Id
  VpcSubnets:
    Description: The 3 subnets this Stack will be using.
    Type: 'List<AWS::EC2::Subnet::Id>'
    Default: "subnet-06d7b330029a70c72,subnet-02a1efd86ffa13cde,subnet-0d8c260a7d7fcc9a3"
  KeyName:
    Description: The initial EC2 Key Pair to allow SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
  ChefEnvironment:
    Description: Name of Chef Environment
    AllowedValues:
      - AWS-NonProduction
    Type: String
    Default: AWS-NonProduction
  ElasticVersion:
    Description: Elastic Version
    AllowedValues:
      - 7.1.1
      - 7.4.2
      - 7.5.0
      - 7.5.2
    Type: String
    Default: 7.5.2
  ElasticsearchInstanceType:
    Description: EC2 instance type
    Type: String
    Default: i3.2xlarge
    AllowedValues:
    - i3.large
    - i3.xlarge
    - i3.2xlarge
  KibanaVersion:
    Description: Kibana Version
    AllowedValues:
      - 7.1.1
      - 7.4.2
      - 7.5.0
      - 7.5.2
    Type: String
    Default: 7.5.2
  KibanaInstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.large
    AllowedValues:
    - t2.large
    - t2.xlarge
  LogstashVersion:
    Description: Logstash Version
    AllowedValues:
      - 7.1.1
      - 7.4.2
      - 7.5.0
      - 7.5.2
    Type: String
    Default: 7.5.2
  LogstashInstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.2xlarge
    AllowedValues:
    - t2.large
    - t2.xlarge
    - t2.2xlarge
  ElasticPassword:
    Description: Elastic main admin password
    Type: String
    Default: "TattsGr0up"
    NoEcho: true
  KibanaPassword:
    Description: Kibana internal user password
    Type: String
    Default: "TattsGr0up"
    NoEcho: true
  LogstashPassword:
    Description: Logstash internal user password
    Type: String
    Default: "TattsGr0up"
    NoEcho: true
  SslPfxLink:
    Description: SSL packages web cert url 
    Type: String
    Default: "http://packagesweb.tattsgroup.com/Applications/lotteries/elasticstack/certificates/LOTT-LPS-ELK-AWS-ENI-DEV-654-Cert.pfx"
  SslPfxPw:
    Description: SSL packages web cert url password 
    Type: String
    Default: "Password1"
    NoEcho: true
  ElasticCaPwd:
    Description: Password for Elastic CA for this deployment 
    Type: String
    Default: "Password1"
    NoEcho: true

Resources:
  elasticsearchSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub
        - ${CFStackName}-Elasticsearch-sg
        - { CFStackName: !Ref 'AWS::StackName' }
      GroupDescription: LPS Elasticsearch Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 10.0.0.0/8
        Description: "Developer ssh port"
      - IpProtocol: tcp
        FromPort: 9201
        ToPort: 9201
        CidrIp: 10.174.20.0/22
        Description: "Elastic Search API endpoint for Internal VPC"
      - IpProtocol: tcp
        FromPort: 9300
        ToPort: 9400
        CidrIp: 10.174.20.0/22
        Description: "Elastic Search transport for Internal VPC"
      - IpProtocol: icmp
        FromPort: 8
        ToPort: 0
        CidrIp: 10.0.191.60/32
        Description: "Icinga Ping Test"
      Tags:
        - Key: "Name"
          Value: !Sub
            - ${CFStackName}-elasticsearch-sg
            - { CFStackName: !Ref 'AWS::StackName' }
        - Key: "Service"
          Value: "Lotteries"
        - Key: "OwnerDescription"
          Value: "LAPS"
        - Key: "Environment"
          Value: !Ref ChefEnvironment
      VpcId: !Ref VpcId
  kibanaSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub
        - ${CFStackName}-Kibana
        - { CFStackName: !Ref 'AWS::StackName' }
      GroupDescription: LPS Elasticsearch Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 10.0.0.0/8
        Description: "Developer ssh port"
      - IpProtocol: tcp
        FromPort: 5601
        ToPort: 5601
        CidrIp: 10.174.20.0/22
        Description: "Kibana Dashboard End Point Internal VPC"
      - IpProtocol: tcp
        FromPort: 10933
        ToPort: 10933
        CidrIp: 10.27.197.10/32
        Description: "Primary Octopus Tentacle port"
      - IpProtocol: tcp
        FromPort: 10933
        ToPort: 10933
        CidrIp: 10.27.69.10/32
        Description: "Secondary Octopus Tentacle port"
      Tags:
        - Key: "Name"
          Value: !Sub
            - ${CFStackName}-kibana-sg
            - { CFStackName: !Ref 'AWS::StackName' }
        - Key: "Service"
          Value: "Lotteries"
        - Key: "OwnerDescription"
          Value: "LAPS"
        - Key: "Environment"
          Value: !Ref ChefEnvironment
        - Key: "Billing"
          Value: "OPEX"
        - Key: "CostCentre"
          Value: "005635"
      VpcId: !Ref VpcId
  logstashSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupName: !Sub
        - ${CFStackName}-Logstash
        - { CFStackName: !Ref 'AWS::StackName' }
      GroupDescription: LPS Elasticsearch Security Group
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 10.0.0.0/8
        Description: "Developer ssh port"
      - IpProtocol: tcp
        FromPort: 9600
        ToPort: 9600
        CidrIp: 10.172.28.0/22
        Description: "API Endpoint for logstash for Internal VPC"
      - IpProtocol: tcp
        FromPort: 5040
        ToPort: 5060
        CidrIp: 10.0.0.0/8
        Description: "File Beat ingestion port range"
      - IpProtocol: tcp
        FromPort: 6040
        ToPort: 6060
        CidrIp: 10.0.0.0/8
        Description: "Json ingestion port range"
      - IpProtocol: tcp
        FromPort: 10933
        ToPort: 10933
        CidrIp: 10.27.197.10/32
        Description: "Primary Octopus Tentacle port"
      - IpProtocol: tcp
        FromPort: 10933
        ToPort: 10933
        CidrIp: 10.27.69.10/32
        Description: "Secondary Octopus Tentacle port"
      - IpProtocol: icmp
        FromPort: 8
        ToPort: 0
        CidrIp: 10.0.191.60/32
        Description: "Icinga Ping Test"
      Tags:
        -
          Key: "Name"
          Value: !Sub
            - ${CFStackName}-logstash-sg
            - { CFStackName: !Ref 'AWS::StackName' }
        - Key: "Service"
          Value: "Lotteries"
        - Key: "OwnerDescription"
          Value: "LAPS"
        - Key: "Environment"
          Value: !Ref ChefEnvironment
      VpcId: !Ref VpcId

  ElasticAutoscalingGroup:
    UpdatePolicy: 
      AutoScalingRollingUpdate: 
        MinInstancesInService: "2"
        MaxBatchSize: "1"
        PauseTime: "PT20M"
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub
        - ${CFStackName}-ElasticAutoscalingGroup
        - { CFStackName: !Ref 'AWS::StackName' }
      AvailabilityZones:
        Fn::GetAZs: ''
      VPCZoneIdentifier: !Ref VpcSubnets
      LaunchConfigurationName:  !Ref ElasticLaunchConfig
      MinSize: '6'
      MaxSize: '6'
      DesiredCapacity: '6'
      HealthCheckType: EC2
      HealthCheckGracePeriod: 600
      TerminationPolicies:
        - OldestLaunchConfiguration
      Tags: 
        -
          Key: "Name"
          Value: !Sub
            - ${CFStackName}-Elastic-instance
            - { CFStackName: !Ref 'AWS::StackName' }
          PropagateAtLaunch: true
        - Key: "Service"
          Value: "Lotteries"
          PropagateAtLaunch: true
        - Key: "OwnerDescription"
          Value: "LAPS"
          PropagateAtLaunch: true
        - Key: "Billing"
          Value: "OPEX"
          PropagateAtLaunch: true
        - Key: "CostCentre"
          Value: "005635"
          PropagateAtLaunch: true
        - Key: "Schedule"
          Value: "24x7"
          PropagateAtLaunch: true
        - Key: "Environment"
          Value: !Ref ChefEnvironment
          PropagateAtLaunch: true
        - Key: "CF-Stack"
          Value: !Ref 'AWS::StackName'
          PropagateAtLaunch: true
        - Key: "es_cluster"
          Value: !Ref 'AWS::StackName'
          PropagateAtLaunch: true
        - Key: "es_node_type"
          Value: "master"
          PropagateAtLaunch: true

  ElasticLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0119aa4d67e59007c
      SecurityGroups: 
        - !Ref elasticsearchSG
      InstanceType: !Ref ElasticsearchInstanceType
      IamInstanceProfile: "arn:aws:iam::194141084398:instance-profile/iam-lotteries-baseline-test-ElasticStackRole-InstanceProfile-2BN2KPDKM5PG"
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          # Log everything
          exec 1>/root/lps-userdata-log.log 2>&1

          # AL2 specific preperation commands
          sudo yum update -y
          # sudo reboot

          # Do some chef pre-work
          /bin/mkdir -p /etc/chef
          /bin/mkdir -p /var/log/chef
          chmod 755 /etc/chef /var/log/chef

          # Create mergeOverrides python script
          cat > "/tmp/mergeOverrides.py" << EOF
          import json
          obj = json.loads('{}')
          obj['run_list']=[]
          obj['run_list'].append('role[lotteries_aws_es7_elasticsearch]')
          jsonkeys = {"ClusterName": "${AWS::StackName}", "KibanaPassword": "${KibanaPassword}", "ElasticPassword": "${ElasticPassword}", "LogstashPassword": "${LogstashPassword}", "SslPfxLink": "${SslPfxLink}", "SslPfxPw": "${SslPfxPw}", "ElasticVersion": "${ElasticVersion}", "ElasticCaPwd": "${ElasticCaPwd}"}
          obj.update(jsonkeys)
          with open('/etc/chef/chefOverrides.json', 'w+') as f:
            f.write(json.dumps(obj,indent=4))
          EOF

          # Create client.rb
          cat > "/etc/chef/client.rb" << EOF
          log_location            '/var/log/chef/chef.log'
          chef_server_url         'https://chef.tattsgroup.com/organizations/tattsgroup'
          rubygems_url            'https://artifactory.tattsgroup.com/artifactory/api/gems/external-ruby-mirror/'
          validation_client_name  'tattsgroup-validator'
          validation_key          '/etc/chef/tattsgroup-validator.pem'
          ssl_verify_mode         :verify_none
          environment             '${ChefEnvironment}'
          json_attribs            '/etc/chef/chefOverrides.json'
          node_name               '${!HOSTNAME}'
          exit_status             :enabled
          EOF
          chmod 644 /etc/chef/client.rb

          # Create knife.rb
          cat > "/etc/chef/knife.rb" << EOF
          log_level       :debug
          log_location    '/var/log/knife.log'
          client_key      '/etc/chef/client.pem'
          validation_client_name  'tattsgroup-validator'
          validation_key  '/etc/chef/tattsgroup-validator.pem'
          chef_server_url 'https://chef.tattsgroup.com/organizations/tattsgroup'
          trusted_certs_dir       '/etc/chef/trusted_certs'
          ssl_verify_mode :verify_none
          node_name       '${!HOSTNAME}'
          EOF
          chmod 644 /etc/chef/knife.rb

          # Download Chef pem file
          wget http://packagesweb.tattsgroup.com/Resources/chef-client-init/tattsgroup-validator.pem -O /etc/chef/tattsgroup-validator.pem
          chmod 644 /etc/chef/tattsgroup-validator.pem

          # Setup chefOverrides.json
          python /tmp/mergeOverrides.py
          rm -f /tmp/mergeOverrides.py

          # Prepare instance store volume - New Way
          lsblk
          mkfs -t xfs /dev/nvme0n1
          mkdir -p /data/elastic
          mount /dev/nvme0n1 /data/elastic
          cp /etc/fstab /etc/fstab.orig
          uuid=`blkid | grep nvme0n1 | awk '{print $2}' |  sed 's/"//g'`
          echo "$uuid /data/elastic        xfs        defaults,nofail        0 2" >> /etc/fstab

          # Get chef rpm and install
          wget http://packagesweb.tattsgroup.com/packages/applications/chef-12.22.3-1.el7.x86_64.rpm -O /tmp/chef-12.22.3-1.el7.x86_64.rpm
          rpm -Uvh /tmp/chef-12.22.3-1.el7.x86_64.rpm
          rm -f /tmp/chef-12.22.3-1.el7.x86_64.rpm

          # Additional linux extras
          amazon-linux-extras install mono

          # Initiate first chef run
          chef-client

  KibanaAutoscalingGroup:
    UpdatePolicy: 
      AutoScalingRollingUpdate: 
        MinInstancesInService: "1"
        MaxBatchSize: "1"
        PauseTime: "PT5M"
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub
        - ${CFStackName}-KibanaAutoscalingGroup
        - { CFStackName: !Ref 'AWS::StackName' }
      AvailabilityZones:
        Fn::GetAZs: ''
      VPCZoneIdentifier: !Ref VpcSubnets
      LaunchConfigurationName:  !Ref KibanaLaunchConfig
      MinSize: '2'
      MaxSize: '2'
      DesiredCapacity: '2'
      HealthCheckType: EC2
      HealthCheckGracePeriod: 600
      TargetGroupARNs:
        - Ref: KibanaTargetGroup
      TerminationPolicies:
        - OldestLaunchConfiguration
      Tags: 
        -
          Key: "Name"
          Value: !Sub
            - ${CFStackName}-Kibana-instance
            - { CFStackName: !Ref 'AWS::StackName' }
          PropagateAtLaunch: true
        - Key: "Service"
          Value: "Lotteries"
          PropagateAtLaunch: true
        - Key: "OwnerDescription"
          Value: "LAPS"
          PropagateAtLaunch: true
        - Key: "Billing"
          Value: "OPEX"
          PropagateAtLaunch: true
        - Key: "CostCentre"
          Value: "005635"
          PropagateAtLaunch: true
        - Key: "Schedule"
          Value: "24x7"
          PropagateAtLaunch: true
        - Key: "Environment"
          Value: !Ref ChefEnvironment
          PropagateAtLaunch: true
        - Key: "CF-Stack"
          Value: !Ref 'AWS::StackName'
          PropagateAtLaunch: true
        - Key: "es_cluster"
          Value: !Ref 'AWS::StackName'
          PropagateAtLaunch: true
        - Key: "es_node_type"
          Value: "Coord"
          PropagateAtLaunch: true

  KibanaLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0119aa4d67e59007c
      SecurityGroups: 
        - !Ref kibanaSG
        - !Ref elasticsearchSG
      InstanceType: !Ref KibanaInstanceType
      IamInstanceProfile: "arn:aws:iam::194141084398:instance-profile/iam-lotteries-baseline-test-ElasticStackRole-InstanceProfile-2BN2KPDKM5PG"
      KeyName: !Ref KeyName
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          # Log everything
          exec 1>/root/lps-userdata-log.log 2>&1

          # Do some chef pre-work
          /bin/mkdir -p /etc/chef
          /bin/mkdir -p /var/log/chef
          chmod 755 /etc/chef /var/log/chef

          # Create mergeOverrides python script
          cat > "/tmp/mergeOverrides.py" << EOF
          import json
          obj = json.loads('{"octopus":{"tentacle":{"roles":["ElasticStack.Kibana"]}}}')
          obj['run_list']=[]
          obj['run_list'].append('role[lotteries_aws_es7_kibana]')
          jsonkeys = {"ClusterName": "${AWS::StackName}", "KibanaPassword": "${KibanaPassword}", "SslPfxLink": "${SslPfxLink}", "SslPfxPw": "${SslPfxPw}", "KibanaVersion": "${KibanaVersion}", "ElasticVersion": "${ElasticVersion}", "ElasticCaPwd": "${ElasticCaPwd}"}
          obj.update(jsonkeys)
          with open('/etc/chef/chefOverrides.json', 'w+') as f:
            f.write(json.dumps(obj,indent=4))
          EOF

          # Create client.rb
          cat > "/etc/chef/client.rb" << EOF
          log_location            '/var/log/chef/chef.log'
          chef_server_url         'https://chef.tattsgroup.com/organizations/tattsgroup'
          rubygems_url            'https://artifactory.tattsgroup.com/artifactory/api/gems/external-ruby-mirror/'
          validation_client_name  'tattsgroup-validator'
          validation_key          '/etc/chef/tattsgroup-validator.pem'
          ssl_verify_mode         :verify_none
          environment             '${ChefEnvironment}'
          json_attribs            '/etc/chef/chefOverrides.json'
          node_name               '${!HOSTNAME}'
          exit_status             :enabled
          EOF
          chmod 644 /etc/chef/client.rb

          # Create knife.rb
          cat > "/etc/chef/knife.rb" << EOF
          log_level       :debug
          log_location    '/var/log/knife.log'
          client_key      '/etc/chef/client.pem'
          validation_client_name  'tattsgroup-validator'
          validation_key  '/etc/chef/tattsgroup-validator.pem'
          chef_server_url 'https://chef.tattsgroup.com/organizations/tattsgroup'
          trusted_certs_dir       '/etc/chef/trusted_certs'
          ssl_verify_mode :verify_none
          node_name       '${!HOSTNAME}'
          EOF
          chmod 644 /etc/chef/knife.rb

          # Download Chef pem file
          wget http://packagesweb.tattsgroup.com/Resources/chef-client-init/tattsgroup-validator.pem -O /etc/chef/tattsgroup-validator.pem
          chmod 644 /etc/chef/tattsgroup-validator.pem
          
          # Setup chefOverrides.json
          python /tmp/mergeOverrides.py
          rm -f /tmp/mergeOverrides.py

          # Get chef rpm and install
          wget http://packagesweb.tattsgroup.com/packages/applications/chef-12.22.3-1.el7.x86_64.rpm -O /tmp/chef-12.22.3-1.el7.x86_64.rpm
          rpm -Uvh /tmp/chef-12.22.3-1.el7.x86_64.rpm
          rm -f /tmp/chef-12.22.3-1.el7.x86_64.rpm

          # Additional linux extras
          amazon-linux-extras install mono

          # Initiate first chef run
          chef-client
  LogstashAutoscalingGroup:
    UpdatePolicy: 
      AutoScalingRollingUpdate: 
        MinInstancesInService: "1"
        MaxBatchSize: "1"
        PauseTime: "PT5M"
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub
        - ${CFStackName}-LogstashAutoscalingGroup
        - { CFStackName: !Ref 'AWS::StackName' }
      AvailabilityZones:
        Fn::GetAZs: ''
      VPCZoneIdentifier: !Ref VpcSubnets
      LaunchConfigurationName:  !Ref LogstashLaunchConfig
      MinSize: '3'
      MaxSize: '6'
      DesiredCapacity: '3'
      HealthCheckType: EC2
      HealthCheckGracePeriod: 600
      TargetGroupARNs:
        - Ref: LogstashAsgardTargetGroup
        - Ref: LogstashLottTargetGroup
        - Ref: LogstashCLSTargetGroup
        - Ref: LogstashWCMSTargetGroup
        - Ref: LogstashAEMTargetGroup
        - Ref: LogstashENSTargetGroup
        - Ref: LogstashACMTargetGroup
        - Ref: LogstashBANKTargetGroup
        - Ref: LogstashCONTargetGroup
        - Ref: LogstashFUSETargetGroup
      TerminationPolicies:
        - NewestInstance
      Tags: 
        -
          Key: "Name"
          Value: !Sub
            - ${CFStackName}-Logstash-instance
            - { CFStackName: !Ref 'AWS::StackName' }
          PropagateAtLaunch: 'true'
        - Key: "Service"
          Value: "Lotteries"
          PropagateAtLaunch: true
        - Key: "OwnerDescription"
          Value: "LAPS"
          PropagateAtLaunch: true
        - Key: "Billing"
          Value: "OPEX"
          PropagateAtLaunch: true
        - Key: "CostCentre"
          Value: "005635"
          PropagateAtLaunch: true
        - Key: "Schedule"
          Value: "24x7"
          PropagateAtLaunch: true
        - Key: "Environment"
          Value: !Ref ChefEnvironment
          PropagateAtLaunch: true
        - Key: "CF-Stack"
          Value: !Ref 'AWS::StackName'
          PropagateAtLaunch: true
  LogstashLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-0119aa4d67e59007c
      SecurityGroups: 
        - !Ref logstashSG
      InstanceType: t2.2xlarge
      IamInstanceProfile: "arn:aws:iam::194141084398:instance-profile/iam-lotteries-baseline-test-ElasticStackRole-InstanceProfile-2BN2KPDKM5PG"
      KeyName: !Ref KeyName
      BlockDeviceMappings:
        - DeviceName: "/dev/sdi"
          Ebs:
            Encrypted: "true"
            VolumeType: "gp2"
            DeleteOnTermination: "false"
            VolumeSize: "100"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          # Log everything
          exec 1>/root/lps-userdata-log.log 2>&1

          # Create the persistent queue PV/VG/LV for easy future manipulation
          mkdir -p /data/logstash
          yum install -y lvm2
          pvcreate /dev/xvdi
          vgcreate logstashdatavg /dev/xvdi
          lvcreate -l 100%VG -n logstashdatalv logstashdatavg
          mkfs.xfs /dev/logstashdatavg/logstashdatalv
          mount /dev/logstashdatavg/logstashdatalv /data/logstash
          mkdir -p /data/logstash/queue

          # permanently add new file system to fstab 
          uuid=`blkid | grep logstashdatavg | awk '{print $2}' |  sed 's/"//g'`
          echo "$uuid /data/logstash        xfs        defaults        0 0" >> /etc/fstab
          
          # Do some chef pre-work
          /bin/mkdir -p /etc/chef
          /bin/mkdir -p /var/log/chef
          chmod 755 /etc/chef /var/log/chef

          # Create mergeOverrides python script
          cat > "/tmp/mergeOverrides.py" << EOF
          import json
          obj = json.loads('{"octopus":{"tentacle":{"roles":["ElasticStack.Logstash"]}}}')
          obj['run_list']=[]
          obj['run_list'].append('role[lotteries_aws_es7_logstash]')
          jsonkeys = {"ClusterName": "${AWS::StackName}","ElasticPassword": "${ElasticPassword}","LogstashPassword": "${LogstashPassword}", "SslPfxLink": "${SslPfxLink}", "SslPfxPw": "${SslPfxPw}", "LogstashVersion": "${LogstashVersion}", "ElasticVersion": "${ElasticVersion}", "ElasticCaPwd": "${ElasticCaPwd}"}
          obj.update(jsonkeys)
          with open('/etc/chef/chefOverrides.json', 'w+') as f:
            f.write(json.dumps(obj,indent=4))
          EOF

          # Create client.rb
          cat > "/etc/chef/client.rb" << EOF
          log_location            '/var/log/chef/chef.log'
          chef_server_url         'https://chef.tattsgroup.com/organizations/tattsgroup'
          rubygems_url            'https://artifactory.tattsgroup.com/artifactory/api/gems/external-ruby-mirror/'
          validation_client_name  'tattsgroup-validator'
          validation_key          '/etc/chef/tattsgroup-validator.pem'
          ssl_verify_mode         :verify_none
          environment             '${ChefEnvironment}'
          json_attribs            '/etc/chef/chefOverrides.json'
          node_name               '${!HOSTNAME}'
          exit_status             :enabled
          EOF
          chmod 644 /etc/chef/client.rb

          # Create knife.rb
          cat > "/etc/chef/knife.rb" << EOF
          log_level       :debug
          log_location    '/var/log/knife.log'
          client_key      '/etc/chef/client.pem'
          validation_client_name  'tattsgroup-validator'
          validation_key  '/etc/chef/tattsgroup-validator.pem'
          chef_server_url 'https://chef.tattsgroup.com/organizations/tattsgroup'
          trusted_certs_dir       '/etc/chef/trusted_certs'
          ssl_verify_mode :verify_none
          node_name       '${!HOSTNAME}'
          EOF
          chmod 644 /etc/chef/knife.rb

          # Download Chef pem file
          wget http://packagesweb.tattsgroup.com/Resources/chef-client-init/tattsgroup-validator.pem -O /etc/chef/tattsgroup-validator.pem
          chmod 644 /etc/chef/tattsgroup-validator.pem
          
          # Setup chefOverrides.json
          python /tmp/mergeOverrides.py
          rm -f /tmp/mergeOverrides.py

          # Get chef rpm and install
          wget http://packagesweb.tattsgroup.com/packages/applications/chef-12.22.3-1.el7.x86_64.rpm -O /tmp/chef-12.22.3-1.el7.x86_64.rpm
          rpm -Uvh /tmp/chef-12.22.3-1.el7.x86_64.rpm
          rm -f /tmp/chef-12.22.3-1.el7.x86_64.rpm

          # Additional linux extras
          amazon-linux-extras install mono

          # Initiate first chef run
          chef-client
  KibanaInternalLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupName: !Sub
        - ${CFStackName}-Kibana-ELB
        - { CFStackName: !Ref 'AWS::StackName' }
      GroupDescription: Allow Kibana users to access internal ELB
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 10.0.0.0/8
      Tags:
        -
          Key: "Name"
          Value: !Sub
            - ${CFStackName}-kibana-alb-sg
            - { CFStackName: !Ref 'AWS::StackName' }
        - Key: "Service"
          Value: "Lotteries"
        - Key: "OwnerDescription"
          Value: "LAPS"
        - Key: "CostCentre"
          Value: "005635"
        - Key: "Schedule"
          Value: "24x7"
        - Key: "Environment"
          Value: !Ref ChefEnvironment
        - Key: "CF-Stack"
          Value: !Ref 'AWS::StackName'
  KibanaListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
      - CertificateArn: "arn:aws:acm:ap-southeast-2:194141084398:certificate/2ae8c656-6e1d-45ce-b26f-35cc18a61187"
      DefaultActions:
      - Type: forward
        TargetGroupArn: 
          Ref: KibanaTargetGroup
      LoadBalancerArn:
        Ref: KibanaApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
  KibanaApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub
        - ${CFStackName}-Kibana-alb
        - { CFStackName: !Ref 'AWS::StackName' }
      Scheme: internal
      Subnets: !Ref VpcSubnets
      SecurityGroups:
        - Ref: KibanaInternalLoadBalancerSecurityGroup
      Tags:
        -
          Key: "Name"
          Value: !Sub
            - ${CFStackName}-kibana-alb
            - { CFStackName: !Ref 'AWS::StackName' }
        - Key: "Service"
          Value: "Lotteries"
        - Key: "OwnerDescription"
          Value: "LAPS"
        - Key: "CostCentre"
          Value: "005635"
        - Key: "Schedule"
          Value: "24x7"
        - Key: "Environment"
          Value: !Ref ChefEnvironment
        - Key: "CF-Stack"
          Value: !Ref 'AWS::StackName'
  KibanaTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: /
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: '200,302'
      Name: !Sub
        - ${CFStackName}-kib-tg
        - { CFStackName: !Ref 'AWS::StackName' }
      Port: 5601
      Protocol: HTTPS
      TargetType: instance
      VpcId: !Ref VpcId
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
        - Key: slow_start.duration_seconds
          Value: 30
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.lb_cookie.duration_seconds
          Value: 28800
        - Key: stickiness.type
          Value: lb_cookie
      Tags:
        -
          Key: "Name"
          Value: !Sub
            - ${CFStackName}-kibana-lb
            - { CFStackName: !Ref 'AWS::StackName' }
        - Key: "Service"
          Value: "Lotteries"
        - Key: "OwnerDescription"
          Value: "LAPS"
        - Key: "CostCentre"
          Value: "005635"
        - Key: "Schedule"
          Value: "24x7"
        - Key: "Environment"
          Value: !Ref ChefEnvironment
        - Key: "CF-Stack"
          Value: !Ref 'AWS::StackName'
  LogstashAsgardListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: LogstashAsgardTargetGroup
      LoadBalancerArn:
        Ref: LogstashNetworkLoadBalancer
      Port: 5046
      Protocol: TCP
  LogstashTheLottAPIListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: LogstashLottTargetGroup
      LoadBalancerArn:
        Ref: LogstashNetworkLoadBalancer
      Port: 5048
      Protocol: TCP
  LogstashCLSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: LogstashCLSTargetGroup
      LoadBalancerArn:
        Ref: LogstashNetworkLoadBalancer
      Port: 5049
      Protocol: TCP
  LogstashWCMSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: LogstashWCMSTargetGroup
      LoadBalancerArn:
        Ref: LogstashNetworkLoadBalancer
      Port: 5050
      Protocol: TCP
  LogstashAEMListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: LogstashAEMTargetGroup
      LoadBalancerArn:
        Ref: LogstashNetworkLoadBalancer
      Port: 5051
      Protocol: TCP
  LogstashENSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: LogstashENSTargetGroup
      LoadBalancerArn:
        Ref: LogstashNetworkLoadBalancer
      Port: 5052
      Protocol: TCP
  LogstashACMListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: LogstashACMTargetGroup
      LoadBalancerArn:
        Ref: LogstashNetworkLoadBalancer
      Port: 5053
      Protocol: TCP
  LogstashBANKListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: LogstashBANKTargetGroup
      LoadBalancerArn:
        Ref: LogstashNetworkLoadBalancer
      Port: 5055
      Protocol: TCP
  LogstashCONListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: LogstashCONTargetGroup
      LoadBalancerArn:
        Ref: LogstashNetworkLoadBalancer
      Port: 5040
      Protocol: TCP
  LogstashFUSEListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: LogstashFUSETargetGroup
      LoadBalancerArn:
        Ref: LogstashNetworkLoadBalancer
      Port: 5044
      Protocol: TCP
  LogstashNetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub
        - ${CFStackName}-Logstash-nlb
        - { CFStackName: !Ref 'AWS::StackName' }
      Scheme: internal
      Type: network
      Subnets: !Ref VpcSubnets
      Tags:
        -
          Key: "Name"
          Value: !Sub
            - ${CFStackName}-logstash-nlb
            - { CFStackName: !Ref 'AWS::StackName' }
        - Key: "Service"
          Value: "Lotteries"
        - Key: "OwnerDescription"
          Value: "LAPS"
        - Key: "Billing"
          Value: "OPEX"
        - Key: "CostCentre"
          Value: "005635"
        - Key: "Schedule"
          Value: "24x7"
        - Key: "Environment"
          Value: !Ref ChefEnvironment
        - Key: "CF-Stack"
          Value: !Ref 'AWS::StackName'
  LogstashAsgardTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Name: !Sub
        - ${CFStackName}-log-asg-tg
        - { CFStackName: !Ref 'AWS::StackName' }
      Port: 5046
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref VpcId
      Tags:
        -
          Key: "Name"
          Value: !Sub
            - ${CFStackName}-kibana-lb
            - { CFStackName: !Ref 'AWS::StackName' }
        - Key: "Service"
          Value: "Lotteries"
        - Key: "OwnerDescription"
          Value: "LAPS"
        - Key: "Billing"
          Value: "OPEX"
        - Key: "CostCentre"
          Value: "005635"
        - Key: "Schedule"
          Value: "24x7"
        - Key: "Environment"
          Value: !Ref ChefEnvironment
        - Key: "CF-Stack"
          Value: !Ref 'AWS::StackName'
  LogstashLottTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Name: !Sub
        - ${CFStackName}-log-lot-tg
        - { CFStackName: !Ref 'AWS::StackName' }
      Port: 5048
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref VpcId
      Tags:
        -
          Key: "Name"
          Value: !Sub
            - ${CFStackName}-kibana-lb
            - { CFStackName: !Ref 'AWS::StackName' }
        - Key: "Service"
          Value: "Lotteries"
        - Key: "OwnerDescription"
          Value: "LAPS"
        - Key: "Billing"
          Value: "OPEX"
        - Key: "CostCentre"
          Value: "005635"
        - Key: "Schedule"
          Value: "24x7"
        - Key: "Environment"
          Value: !Ref ChefEnvironment
        - Key: "CF-Stack"
          Value: !Ref 'AWS::StackName'
  LogstashCLSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Name: !Sub
        - ${CFStackName}-log-cls-tg
        - { CFStackName: !Ref 'AWS::StackName' }
      Port: 5049
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref VpcId
      Tags:
        -
          Key: "Name"
          Value: !Sub
            - ${CFStackName}-kibana-lb
            - { CFStackName: !Ref 'AWS::StackName' }
        - Key: "Service"
          Value: "Lotteries"
        - Key: "OwnerDescription"
          Value: "LAPS"
        - Key: "Billing"
          Value: "OPEX"
        - Key: "CostCentre"
          Value: "005635"
        - Key: "Schedule"
          Value: "24x7"
        - Key: "Environment"
          Value: !Ref ChefEnvironment
        - Key: "CF-Stack"
          Value: !Ref 'AWS::StackName'
  LogstashWCMSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Name: !Sub
        - ${CFStackName}-log-wcms-tg
        - { CFStackName: !Ref 'AWS::StackName' }
      Port: 5050
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref VpcId
      Tags:
        -
          Key: "Name"
          Value: !Sub
            - ${CFStackName}-kibana-lb
            - { CFStackName: !Ref 'AWS::StackName' }
        - Key: "Service"
          Value: "Lotteries"
        - Key: "OwnerDescription"
          Value: "LAPS"
        - Key: "Billing"
          Value: "OPEX"
        - Key: "CostCentre"
          Value: "005635"
        - Key: "Schedule"
          Value: "24x7"
        - Key: "Environment"
          Value: !Ref ChefEnvironment
        - Key: "CF-Stack"
          Value: !Ref 'AWS::StackName'
  LogstashAEMTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Name: !Sub
        - ${CFStackName}-log-aem-tg
        - { CFStackName: !Ref 'AWS::StackName' }
      Port: 5051
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref VpcId
      Tags:
        -
          Key: "Name"
          Value: !Sub
            - ${CFStackName}-kibana-lb
            - { CFStackName: !Ref 'AWS::StackName' }
        - Key: "Service"
          Value: "Lotteries"
        - Key: "OwnerDescription"
          Value: "LAPS"
        - Key: "Billing"
          Value: "OPEX"
        - Key: "CostCentre"
          Value: "005635"
        - Key: "Schedule"
          Value: "24x7"
        - Key: "Environment"
          Value: !Ref ChefEnvironment
        - Key: "CF-Stack"
          Value: !Ref 'AWS::StackName'
  LogstashENSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Name: !Sub
        - ${CFStackName}-log-ens-tg
        - { CFStackName: !Ref 'AWS::StackName' }
      Port: 5052
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref VpcId
      Tags:
        -
          Key: "Name"
          Value: !Sub
            - ${CFStackName}-kibana-lb
            - { CFStackName: !Ref 'AWS::StackName' }
        - Key: "Service"
          Value: "Lotteries"
        - Key: "OwnerDescription"
          Value: "LAPS"
        - Key: "Billing"
          Value: "OPEX"
        - Key: "CostCentre"
          Value: "005635"
        - Key: "Schedule"
          Value: "24x7"
        - Key: "Environment"
          Value: !Ref ChefEnvironment
        - Key: "CF-Stack"
          Value: !Ref 'AWS::StackName'
  LogstashACMTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Name: !Sub
        - ${CFStackName}-log-acm-tg
        - { CFStackName: !Ref 'AWS::StackName' }
      Port: 5053
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref VpcId
      Tags:
        -
          Key: "Name"
          Value: !Sub
            - ${CFStackName}-kibana-lb
            - { CFStackName: !Ref 'AWS::StackName' }
        - Key: "Service"
          Value: "Lotteries"
        - Key: "OwnerDescription"
          Value: "LAPS"
        - Key: "Billing"
          Value: "OPEX"
        - Key: "CostCentre"
          Value: "005635"
        - Key: "Schedule"
          Value: "24x7"
        - Key: "Environment"
          Value: !Ref ChefEnvironment
        - Key: "CF-Stack"
          Value: !Ref 'AWS::StackName'
  LogstashCONTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Name: !Sub
        - ${CFStackName}-log-con-tg
        - { CFStackName: !Ref 'AWS::StackName' }
      Port: 5040
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref VpcId
      Tags:
        -
          Key: "Name"
          Value: !Sub
            - ${CFStackName}-kibana-lb
            - { CFStackName: !Ref 'AWS::StackName' }
        - Key: "Service"
          Value: "Lotteries"
        - Key: "OwnerDescription"
          Value: "LAPS"
        - Key: "Billing"
          Value: "OPEX"
        - Key: "CostCentre"
          Value: "005635"
        - Key: "Schedule"
          Value: "24x7"
        - Key: "Environment"
          Value: !Ref ChefEnvironment
        - Key: "CF-Stack"
          Value: !Ref 'AWS::StackName'
  LogstashBANKTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Name: !Sub
        - ${CFStackName}-log-bank-tg
        - { CFStackName: !Ref 'AWS::StackName' }
      Port: 5055
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref VpcId
      Tags:
        -
          Key: "Name"
          Value: !Sub
            - ${CFStackName}-kibana-lb
            - { CFStackName: !Ref 'AWS::StackName' }
        - Key: "Service"
          Value: "Lotteries"
        - Key: "OwnerDescription"
          Value: "LAPS"
        - Key: "Billing"
          Value: "OPEX"
        - Key: "CostCentre"
          Value: "005635"
        - Key: "Schedule"
          Value: "24x7"
        - Key: "Environment"
          Value: !Ref ChefEnvironment
        - Key: "CF-Stack"
          Value: !Ref 'AWS::StackName'
  LogstashFUSETargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: TCP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Name: !Sub
        - ${CFStackName}-log-fuse-tg
        - { CFStackName: !Ref 'AWS::StackName' }
      Port: 5044
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref VpcId
      Tags:
        -
          Key: "Name"
          Value: !Sub
            - ${CFStackName}-kibana-lb
            - { CFStackName: !Ref 'AWS::StackName' }
        - Key: "Service"
          Value: "Lotteries"
        - Key: "OwnerDescription"
          Value: "LAPS"
        - Key: "Billing"
          Value: "OPEX"
        - Key: "CostCentre"
          Value: "005635"
        - Key: "Schedule"
          Value: "24x7"
        - Key: "Environment"
          Value: !Ref ChefEnvironment
        - Key: "CF-Stack"
          Value: !Ref 'AWS::StackName'